def print_board(board):
    for row in board:
        print(" ".join(row))
    print()

def check_winner(board, player):
    for i in range(3):
        if all(cell == player for cell in board[i]) or all(row[i] == player for row in board):
            return True
    return all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3))

def is_full(board):
    return all(all(cell != '-' for cell in row) for row in board)

def minimax(board, depth, is_maximizing):
    scores = {'X': 1, 'O': -1, 'draw': 0}
    player = 'X' if is_maximizing else 'O'
    
    if check_winner(board, 'X'):
        return scores['X']
    if check_winner(board, 'O'):
        return scores['O']
    if is_full(board):
        return scores['draw']
    
    best_score = -float('inf') if is_maximizing else float('inf')
    
    for row in range(3):
        for col in range(3):
            if board[row][col] == '-':
                board[row][col] = player
                score = minimax(board, depth + 1, not is_maximizing)
                board[row][col] = '-'
                best_score = max(best_score, score) if is_maximizing else min(best_score, score)
    
    return best_score

def find_best_move(board):
    best_score = -float('inf')
    best_move = None
    
    for row in range(3):
        for col in range(3):
            if board[row][col] == '-':
                board[row][col] = 'X'
                score = minimax(board, 0, False)
                board[row][col] = '-'
                
                if score > best_score:
                    best_score = score
                    best_move = (row, col)
    
    return best_move

def main():
    board = [['-' for _ in range(3)] for _ in range(3)]
    
    while not (check_winner(board, 'X') or check_winner(board, 'O') or is_full(board)):
        print_board(board)
        
        row, col = map(int, input("Enter row and column (0-2) separated by a space: ").split())
        
        if board[row][col] == '-':
            board[row][col] = 'O'
        else:
            print("Cell is already occupied. Try again.")
            continue
        
        if check_winner(board, 'O'):
            print_board(board)
            print("Player wins!")
            break
        
        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break
        
        print_board(board)
        
        best_row, best_col = find_best_move(board)
        board[best_row][best_col] = 'X'
        
        if check_winner(board, 'X'):
            print_board(board)
            print("AI wins!")
            break
        
        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break

if _name_ == "_main_":
    main()
